package org.unibl.etf.view;

import java.awt.Color;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

import org.unibl.etf.model.Session;
import org.unibl.etf.model.User;

@SuppressWarnings("serial")
public class BlockUnblockForm extends JDialog {

	private JPanel contentPane;
	
	private JComboBox<String> cmbType;
	
	private JTable tblUsers;
	private DefaultTableModel dtm;
	private JScrollPane usersScroll;
	
	private JButton btnBlock;
	private JButton btnUnblock;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			BlockUnblockForm dialog = new BlockUnblockForm();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the dialog.
	 */
	public BlockUnblockForm() {
		setModalityType(ModalityType.APPLICATION_MODAL);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(412, 236, 376, 228);
		setBackground(Color.WHITE);
		setTitle("Promjena stanja korisnika");
		setResizable(false);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(null);
		setContentPane(contentPane);
		
		initComponents();
	}
	
	private void initComponents() {
		cmbType = new JComboBox<>();
		cmbType.setBackground(Color.WHITE);
		cmbType.setForeground(Color.BLACK);
		cmbType.setBounds(30, 10, 300, 30);
		cmbType.addItem("Aktivni");
		cmbType.addItem("Blokirani");
		contentPane.add(cmbType);
		
		
	}
	
	private void initUsersTable(String type) {
		dtm = new DefaultTableModel();
		dtm.addColumn("Ime");
		dtm.addColumn("Prezime");
		dtm.addColumn("Korisniƒçko ime");
		
		Session[] sessions = user.getSessions();
		ArrayList<Session> list = new ArrayList<>();
		for(Session s : sessions) {
			list.add(s);
		}
		
		LocalDateTime now = LocalDateTime.now();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy. HH:mm:ss");
		Collections.sort(list, new Comparator<Session>() {
			public int compare(Session o1, Session o2) {
				LocalDateTime ldt1 = LocalDateTime.parse(o1.getLoginTime(), formatter);
				LocalDateTime ldt2 = LocalDateTime.parse(o2.getLoginTime(), formatter);
				Long seconds1 = ChronoUnit.SECONDS.between(ldt1, now);
				Long seconds2 = ChronoUnit.SECONDS.between(ldt2, now);
				return (seconds2).compareTo(seconds1);
			}
		});
		
		for(Session s : list) {
			LocalDateTime start = LocalDateTime.parse(s.getLoginTime(), formatter);
			LocalDateTime end = LocalDateTime.parse(s.getLogoutTime(), formatter);
			long seconds = ChronoUnit.SECONDS.between(start, end);
			Object[] rowData = { s.getLoginTime(), s.getLogoutTime(), seconds / 3600 + ":" + (seconds % 3600) / 60 + ":" + (seconds % 3600) % 60 };
			dtm.addRow(rowData);
		}
		
		tblUsers = new JTable(dtm);
		tblUsers.setAutoCreateRowSorter(true);
		tblUsers.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tblUsers.setBackground(Color.WHITE);
		
		dataScroll = new JScrollPane(tblData);
		dataScroll.setBounds(10, 10, 764, 502);
		dataPane.add(dataScroll);
	}

}
