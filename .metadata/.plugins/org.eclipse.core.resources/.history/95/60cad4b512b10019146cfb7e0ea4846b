package org.unibl.etf.rmi;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;

import org.unibl.etf.model.FileTransferData;
import org.unibl.etf.model.User;

public class FilesServer implements FilesInterface {
	
	private static String FILES_PATH = "files";
	private static String POLICY_PATH = "resources";
	
	public FilesServer() throws RemoteException {}

	@Override
	public boolean uploadFile(FileTransferData data) throws RemoteException {
		User sender = data.getSender();
		User receiver = data.getReceiver();
		String name = data.getFileName();
		String fileName = data.getSeconds() + "_" + sender.getUsername() + "_" + name;
		File destinationFolder = new File(FILES_PATH + File.separator + receiver.getUsername());
		if(!destinationFolder.exists()) {
			destinationFolder.mkdir();
		}
		File destination = new File(destinationFolder.getAbsolutePath() + File.separator + fileName);
		byte[] fileData = data.getFileData();
		try {
			Files.write(Paths.get(destination.getAbsolutePath()), fileData);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return true;
	}

	@Override
	public ArrayList<FileTransferData> getAllFiles(User user) throws RemoteException {
		ArrayList<FileTransferData> data = new ArrayList<>();
		
		File userFolder = new File(FILES_PATH + File.separator + user.getUsername());
		
		return data;
	}

	@Override
	public FileTransferData downloadFile(FileTransferData data) throws RemoteException {
		// TODO Auto-generated method stub
		return null;
	}
	
	public static void main(String args[]) {
		System.setProperty("java.security.policy", POLICY_PATH + File.separator + "server_policyfile.txt");
		if (System.getSecurityManager() == null) {
			System.setSecurityManager(new SecurityManager());
		}
		
		try {
			FilesServer server = new FilesServer();
			FilesInterface stub = (FilesInterface) UnicastRemoteObject.exportObject(server, 0);
			Registry registry = LocateRegistry.createRegistry(1099);
			registry.rebind("FilesServer", stub);
			System.out.println("Server started.");
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}

}
