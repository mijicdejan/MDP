package org.unibl.etf.view;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@SuppressWarnings("serial")
public class ChangePasswordForm extends JDialog {
	
	private static final String BASE_URL = "http://localhost:8080/RestServer/api/users"; // properties

	private JPanel contentPane;
	
	private JLabel lblPassword;
	private JTextField pfPassword;
	private JLabel lblNewPassword;
	private JPasswordField pfNewPassword;
	private JLabel lblNewPasswordConfirm;
	private JPasswordField pfNewPasswordConfirm;
	private JButton btnConfirm;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		try {
			ChangePasswordForm dialog = new ChangePasswordForm();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the dialog.
	 */
	public ChangePasswordForm() {
		setModalityType(ModalityType.APPLICATION_MODAL);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(300, 100, 376, 283);
		setLocationRelativeTo(null);
		setBackground(Color.WHITE);
		setTitle("Promjena lozinke");
		setResizable(false);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(null);
		setContentPane(contentPane);
		
		initComponents();
		initButtonListener();
	}
	
	private void initComponents() {
		lblPassword = new JLabel("Lozinka: ");
		lblPassword.setFont(new Font(lblPassword.getFont().getFontName(), Font.PLAIN, 16));
		lblPassword.setBounds(30, 20, 300, 25);
		contentPane.add(lblPassword);
		
		pfPassword = new JPasswordField();
		pfPassword.setBounds(30, 45, 300, 30);
		contentPane.add(pfPassword);
		
		lblNewPassword = new JLabel("Nova lozinka: ");
		lblNewPassword.setFont(new Font(lblNewPassword.getFont().getFontName(), Font.PLAIN, 16));
		lblNewPassword.setBounds(30, 75, 300, 25);
		contentPane.add(lblNewPassword);
		
		pfNewPassword = new JPasswordField();
		pfNewPassword.setBounds(30, 100, 300, 30);
		contentPane.add(pfNewPassword);
		
		lblNewPasswordConfirm = new JLabel("Potvrda nove lozinke: ");
		lblNewPasswordConfirm.setFont(new Font(lblNewPasswordConfirm.getFont().getFontName(), Font.PLAIN, 16));
		lblNewPasswordConfirm.setBounds(30, 130, 300, 25);
		contentPane.add(lblNewPasswordConfirm);
		
		pfNewPasswordConfirm = new JPasswordField();
		pfNewPasswordConfirm.setBounds(30, 155, 300, 30);
		contentPane.add(pfNewPasswordConfirm);
		
		btnConfirm = new JButton("Potvrdi");
		btnConfirm.setBackground(Color.WHITE);
		btnConfirm.setFont(new Font(btnConfirm.getFont().getFontName(), Font.PLAIN, 14));
		btnConfirm.setBounds(230, 195, 100, 30);
		btnConfirm.setBorder(new LineBorder(Color.BLACK));
		contentPane.add(btnConfirm);
	}
	
	private void initButtonListener() {
		btnConfirm.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				btnConfirmClicked();
			}
		});
	}
	
	private void btnConfirmClicked() {
		
	}
	
	private boolean postJSON() {
		URL url;
		try {
			url = new URL(BASE_URL + "/logout");
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");
			OutputStream os = conn.getOutputStream();
			Gson gsonBuilder = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").create();
			String json = gsonBuilder.toJson(user);
			os.write(json.getBytes());
			os.flush();
			if(conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
				os.close();
				conn.disconnect();
				return false;
			}
			os.close();
			conn.disconnect();
			return true;
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (ProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

}
