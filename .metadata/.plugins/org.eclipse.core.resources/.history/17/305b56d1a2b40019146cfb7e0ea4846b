package org.unibl.etf.messages;

import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.util.ArrayList;

import javax.net.ssl.SSLSocket;

import org.unibl.etf.main.Main;
import org.unibl.etf.model.Message;
import org.unibl.etf.model.User;
import org.unibl.etf.util.PropertyManager;

public class AllMessagesThread extends Thread {
	
	private String MESSAGES_PATH;
	
	private ObjectOutputStream out;
	private ObjectInputStream in;
	
	public AllMessagesThread(SSLSocket socket) {
		MESSAGES_PATH = PropertyManager.getInstance().getMessagesPath();
		try {
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.getInputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
	
	@Override
	public void run() {
		try {
			User receiver = (User) in.readObject();
			while(!"".equals(receiver.getUsername())) {
				out.writeObject("OK");
				out.flush();
			}
			out.writeObject("LIST");
			User sender = (User) in.readObject();
			while(!"".equals(sender.getUsername())) {
				out.writeObject("OK");
				out.flush();
			}
			out.writeObject("LIST");
			InetAddress address = socket.getInetAddress();
			Main.addUser(user, address);
			File userDirectory = new File(MESSAGES_PATH + File.separator + user.getUsername());
			if(!userDirectory.exists()) {
				userDirectory.mkdir();
			}
			File unreadDirectory = new File(MESSAGES_PATH + File.separator + user.getUsername() + File.separator + "unread");
			if(!unreadDirectory.exists()) {
				unreadDirectory.mkdir();
			}
			File[] files = unreadDirectory.listFiles();
			ArrayList<Message> messages = new ArrayList<>();
			for(File file : files) {
				String fileName = file.getName();
				int index = fileName.lastIndexOf('.');
				String username = fileName.substring(0, index);
				User sender = new User("", "", username, "", false);
				messages.add(new Message(sender, user, "", null));
			}
			out.writeObject(messages);
			out.flush();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
