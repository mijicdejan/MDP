package org.unibl.etf.service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.unibl.etf.model.User;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

public class ApiService {
	
	public static String instanceName = "Test1";
	
	public static User login(String username, String password) {
		JedisPool pool = new JedisPool("localhost");
		try(Jedis jedis = pool.getResource()) {
			jedis.set(instanceName, "OK");
			Map<String, String> fields = jedis.hgetAll(instanceName + ":users:" + username);
			System.out.println(fields);
			String firstName = fields.get("firstName");
			String lastName = fields.get("lastName");
			pool.close();
			if(fields.size() == 0) {
				return null;
			}
			Map<String, String> sessions = jedis.hgetAll(instanceName + ":users:" + username + ":sessions:");
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy. HH:mm:ss");
			sessions.put(String.valueOf(0), LocalDateTime.now().format(formatter));
			User user = new User(firstName, lastName, username, password);
			user.setSessions((HashMap<String, String>) sessions);
			jedis.hdel(instanceName + ":users:" + username, "sessions");
			jedis.hmset(instanceName + ":users:" + user.getUsername() + ":sessions:", sessions);
			return user;
		}
	}
	
	public static boolean logout(User user) {
		HashMap<String, String> sessions = user.getSessions();
		System.out.println(sessions);
		String loginTime = sessions.get(String.valueOf(0));
		sessions.remove(String.valueOf(0));
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy. HH:mm:ss");
		sessions.put(LocalDateTime.now().format(formatter), loginTime);
		JedisPool pool = new JedisPool();
		try(Jedis jedis = pool.getResource()) {
			jedis.set(instanceName, "OK");
			jedis.hdel(instanceName + ":users:" + user.getUsername(), "sessions");
			jedis.hmset(instanceName + ":users:" + user.getUsername() + ":sessions:", sessions);
		}
		pool.close();
		return true;
	}
	
	public static ArrayList<User> getAllUsers() {
		ArrayList<User> users = new ArrayList<>();
		
		JedisPool pool = new JedisPool();
		try(Jedis jedis = pool.getResource()) {
			Set<String> set = jedis.keys(instanceName + ":users" + "*");
			for(String s : set) {
				if(s.lastIndexOf(':') != s.length() - 1) {
					
				}
			}
			System.out.println(set);
		}
		pool.close();
		
		return users;
	}
	
	public static boolean insertHelp() {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy. HH:mm:ss");
		ArrayList<User> users = new ArrayList<>();
		for(int i = 0; i < 5; i++) {
			HashMap<String, String> sessions = new HashMap<>();
			sessions.put(LocalDateTime.now().format(formatter), LocalDateTime.now().format(formatter));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sessions.put(LocalDateTime.now().format(formatter), LocalDateTime.now().format(formatter));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sessions.put(LocalDateTime.now().format(formatter), LocalDateTime.now().format(formatter));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sessions.put(LocalDateTime.now().format(formatter), LocalDateTime.now().format(formatter));
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sessions.put(LocalDateTime.now().format(formatter), LocalDateTime.now().format(formatter));
			users.add(new User("firstName#" + i, "lastName#" + i, "username#" + i, "password#" + i, sessions));
		}
		JedisPool pool = new JedisPool();
		try(Jedis jedis = pool.getResource()) {
			jedis.set(instanceName, "OK");
			for(User u : users) {
				jedis.hdel(instanceName + ":users:", u.getUsername());
				jedis.hmset(instanceName + ":users:" + u.getUsername(), u.toMap());
				jedis.hmset(instanceName + ":users:" + u.getUsername() + ":sessions:", u.getSessions());
			}
		}
		pool.close();
		return true;
	}

}
