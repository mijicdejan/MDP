package org.unibl.etf.service;

import java.util.ArrayList;
import java.util.Map;
import java.util.Random;
import java.util.Set;

import org.unibl.etf.model.User;
import org.unibl.etf.util.PropertyManager;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

public class AccountsService {
		
	public static User createAccount(String firstName, String lastName) {
		String instanceName = PropertyManager.getInstance().getInstanceName();
		String dbAddress = PropertyManager.getInstance().getDBAddress();
		String[] names = firstName.split(" ");
		firstName = "";
		for(String name : names) {
			name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();
			firstName += name + " ";
		}
		firstName = firstName.substring(0, firstName.length() - 1);
		names = lastName.split(" ");
		lastName = "";
		for(String name : names) {
			name = name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();
			lastName += name + " ";
		}
		lastName = lastName.substring(0, firstName.length() - 1);
		String username = generateUsername(firstName, lastName);
		String password = generatePassword();
		User user = new User(firstName, lastName, username, password, false);
		
		JedisPool pool = new JedisPool(dbAddress);
		try(Jedis jedis = pool.getResource()) {
			jedis.set(instanceName, "OK");
			jedis.hmset(instanceName + ":users:" + user.getUsername(), user.toMap());
		}
		pool.close();
		
		return user;
	}
	
	public static boolean blockUnblockAccount(User user) {
		String instanceName = PropertyManager.getInstance().getInstanceName();
		String dbAddress = PropertyManager.getInstance().getDBAddress();
		JedisPool pool = new JedisPool(dbAddress);
		try(Jedis jedis = pool.getResource()) {
			jedis.hset(instanceName + ":users:" + user.getUsername(), "blocked", user.isBlocked() ? "false" : "true");
		}
		pool.close();
		return true;
	}
	
	private static String generateUsername(String firstName, String lastName) {
		ArrayList<String> usernames = getAllUsernames();
		String username = firstName.toLowerCase() + "." + lastName.toLowerCase();
		
		int i = 1;
		String newUsername = username;
		if(usernames.contains(username)) {
			newUsername = username + "_" + i;
			while(usernames.contains(newUsername)) {
				newUsername = username + "_" + ++i;
			}
		}
		
		return newUsername;
	}
	
	private static String generatePassword() {
		String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
		StringBuilder sb = new StringBuilder();
		Random rand = new Random();
		for(int i = 0; i < 8; i++) {
			sb.append(characters.charAt(rand.nextInt(characters.length())));
		}
		return sb.toString();
	}
	
	private static ArrayList<String> getAllUsernames() {
		String instanceName = PropertyManager.getInstance().getInstanceName();
		String dbAddress = PropertyManager.getInstance().getDBAddress();
		ArrayList<String> usernames = new ArrayList<>();
		JedisPool pool = new JedisPool(dbAddress);
		try(Jedis jedis = pool.getResource()) {
			Set<String> set = jedis.keys(instanceName + ":users" + "*");
			for(String s : set) {
				if(s.split(":").length == 3) {
					Map<String, String> fields = jedis.hgetAll(s);
					String username = fields.get("username");
					usernames.add(username);
				}
			}
		}
		pool.close();
		return usernames;
	}

}
