package org.unibl.etf.messages;

import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

import javax.net.ssl.SSLSocket;

import org.unibl.etf.main.Main;
import org.unibl.etf.model.Message;
import org.unibl.etf.model.User;
import org.unibl.etf.util.PropertyManager;

public class AllMessagesThread extends Thread {
	
	private String MESSAGES_PATH;
	
	private ObjectOutputStream out;
	private ObjectInputStream in;
	
	public AllMessagesThread(SSLSocket socket) {
		MESSAGES_PATH = PropertyManager.getInstance().getMessagesPath();
		try {
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.getInputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
	
	@Override
	public void run() {
		try {
			String s = (String) in.readObject();
			while(!"LIST".equals(s)) {
				File messagesDirectory = new File(MESSAGES_PATH);
				if(!messagesDirectory.exists()) {
					messagesDirectory.mkdir();
				}
				ArrayList<Message> messages = new ArrayList<>();
				File[] folders = messagesDirectory.listFiles();
				for(File folder : folders) {
					String receiverUsername = folder.getName();
					File[] files = folder.listFiles();
					for(File file : files) {
						String fileName = file.getName();
						int index = fileName.lastIndexOf('.');
						String username = fileName.substring(0, index);
						User sender = new User("", "", username, "", false);
						messages.add(new Message(sender, user, "", null));
					}
				}
				out.writeObject(messages);
				out.flush();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
