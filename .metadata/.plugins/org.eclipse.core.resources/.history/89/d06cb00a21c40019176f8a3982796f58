package org.unibl.etf.server;

import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import org.unibl.etf.main.Main;
import org.unibl.etf.model.Message;
import org.unibl.etf.model.User;
import org.unibl.etf.util.MessagesManager;
import org.unibl.etf.util.PropertyManager;

public class ServerThread extends Thread {
	
private String MESSAGES_PATH;
	
	private SSLSocket socket;
	private ObjectOutputStream out;
	private ObjectInputStream in;
	
	private boolean loggedIn;
	
	private String username;
	
	public ServerThread(SSLSocket socket) {
		loggedIn = true;
		MESSAGES_PATH = PropertyManager.getInstance().getMessagesPath();
		this.socket = socket;
		try {
			out = new ObjectOutputStream(socket.getOutputStream());
			in = new ObjectInputStream(socket.getInputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}		
	}
	
	@Override
	public void run() {
		try {
			username = (String) in.readObject();
			Main.userLoggedIn(username, out);
			File userDirectory = new File(MESSAGES_PATH + File.separator + username);
			if(!userDirectory.exists()) {
				userDirectory.mkdir();
			}
			File unreadDirectory = new File(MESSAGES_PATH + File.separator + username + File.separator + "unread");
			if(!unreadDirectory.exists()) {
				unreadDirectory.mkdir();
			}
			File[] files = unreadDirectory.listFiles();
			ArrayList<User> users = new ArrayList<>();
			for(File file : files) {
				String fileName = file.getName();
				int index = fileName.lastIndexOf('.');
				String senderUsername = fileName.substring(0, index);
				User sender = new User("", "", senderUsername, "", false);
				users.add(sender);
			}
			out.writeObject(users);
			ArrayList<Message> messages = new ArrayList<>();
			File readFile = new File(MESSAGES_PATH + File.separator + "group" + File.separator + "group" + ".txt");
			File unreadFile = new File(MESSAGES_PATH + File.separator + "group" + File.separator + "unread" + File.separator + "group" + ".txt");
			if(readFile.exists()) {
				messages.addAll(MessagesManager.getInstance().deserializeWithGson(readFile));
			}
			if(unreadFile.exists()) {
				messages.addAll(MessagesManager.getInstance().deserializeWithGson(unreadFile));
				Files.delete(Paths.get(unreadFile.getAbsolutePath()));
			}
			MessagesManager.getInstance().serializeWithGson(messages, readFile);
			out.writeObject(messages);
			out.flush();
			
			while(loggedIn) {
				String requestType = (String) in.readObject();
				if("LOGOUT".equals(requestType)) {
					Main.userLoggedOut(username);
					loggedIn = false;
				} else if("ALL_MESSAGES".equals(requestType)) {
					String sender = (String) in.readObject();
					messages = new ArrayList<>();
					readFile = null;
					unreadFile = null;
					if("group".equals(sender)) {
						readFile = new File(MESSAGES_PATH + File.separator + sender + File.separator + sender + ".txt");
						unreadFile = new File(MESSAGES_PATH + File.separator + sender + File.separator + "unread" + File.separator + sender + ".txt");
					} else {
						readFile = new File(MESSAGES_PATH + File.separator + username + File.separator + sender + ".txt");
						unreadFile = new File(MESSAGES_PATH + File.separator + username + File.separator + "unread" + File.separator + sender + ".txt");
					}
					if(readFile.exists()) {
						messages.addAll(MessagesManager.getInstance().deserializeWithGson(readFile));
					}
					if(unreadFile.exists()) {
						messages.addAll(MessagesManager.getInstance().deserializeWithGson(unreadFile));
						Files.delete(Paths.get(unreadFile.getAbsolutePath()));
					}
					MessagesManager.getInstance().serializeWithGson(messages, readFile);
					out.writeObject(messages);
					out.flush();
				} else if("NEW_MESSAGE".equals(requestType)) {
					Message message = (Message) in.readObject();
					User sender = message.getSender();
					User receiver = message.getReceiver();
					File senderDirectory = new File(MESSAGES_PATH + File.separator + sender.getUsername());
					if(!senderDirectory.exists()) {
						senderDirectory.mkdir();
					}
					File receiverDirectory = new File(MESSAGES_PATH + File.separator + receiver.getUsername());
					if(!receiverDirectory.exists()) {
						receiverDirectory.mkdir();
					}
					unreadDirectory = new File(MESSAGES_PATH + File.separator + receiver.getUsername() + File.separator + "unread");
					if(!unreadDirectory.exists()) {
						unreadDirectory.mkdir();
					}
					File senderReadFile = new File(MESSAGES_PATH + File.separator + sender.getUsername() + File.separator + receiver.getUsername() + ".txt");
					File receiverUnreadFile = new File(MESSAGES_PATH + File.separator + receiver.getUsername() + File.separator + "unread" + File.separator + sender.getUsername() + ".txt");
					if(senderReadFile.exists()) {
						ArrayList<Message> messages = MessagesManager.getInstance().deserializeWithGson(senderReadFile);
						messages.add(message);
						MessagesManager.getInstance().serializeWithGson(messages, senderReadFile);
					} else {
						ArrayList<Message> messages = new ArrayList<>();
						messages.add(message);
						MessagesManager.getInstance().serializeWithGson(messages, senderReadFile);
					}
					if(receiverUnreadFile.exists()) {
						ArrayList<Message> messages = MessagesManager.getInstance().deserializeWithGson(receiverUnreadFile);
						messages.add(message);
						MessagesManager.getInstance().serializeWithGson(messages, receiverUnreadFile);
					} else {
						ArrayList<Message> messages = new ArrayList<>();
						messages.add(message);
						MessagesManager.getInstance().serializeWithGson(messages, receiverUnreadFile);
					}
					if(Main.isLoggedIn(receiver)) {
						int clientPort = PropertyManager.getInstance().getClientPort();
						InetAddress address = Main.getAddress(receiver);
						SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
						SSLSocket socket = (SSLSocket) factory.createSocket(address, clientPort);
						out = new ObjectOutputStream(socket.getOutputStream());
						in = new ObjectInputStream(socket.getInputStream());
						out.writeObject(sender);
						out.flush();
						System.out.println("Proslijedio");
						while(!"OK".equals(in.readObject())) {
							out.writeObject("NOK");
							out.flush();
						}
						System.out.println("Dobio odgovor");
					}
				} else if("GROUP_MESSAGE".equals(requestType)) {
					
				}
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
