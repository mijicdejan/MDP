package org.unibl.etf.view;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.util.ArrayList;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

import org.json.JSONObject;
import org.unibl.etf.model.User;
import org.unibl.etf.util.PropertyManager;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@SuppressWarnings("serial")
public class LoginForm extends JFrame {
	
	private String BASE_URL;
	private String POLICY_PATH;

	private JPanel contentPane;
	
	private JLabel lblUsername;
	private JTextField tfUsername;
	private JLabel lblPassword;
	private JPasswordField pfPassword;
	private JButton btnLogin;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					LoginForm frame = new LoginForm();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public LoginForm() {
		BASE_URL = PropertyManager.getInstance().getUsersBaseURL();
		POLICY_PATH = PropertyManager.getInstance().getPolicyPath();
		
		System.setProperty("java.security.policy", POLICY_PATH + File.separator + "client_policyfile.txt");
		if (System.getSecurityManager() == null) {
			System.setSecurityManager(new SecurityManager());
		}
		
		String keyStorePath = PropertyManager.getInstance().getKeyStorePath();
		String keyStorePassword = PropertyManager.getInstance().getKeyStorePassword();
		String trustStorePath = PropertyManager.getInstance().getTrustStorePath();
		String trustStorePassword = PropertyManager.getInstance().getTrustStorePassword();
		
		System.setProperty("javax.net.ssl.keyStore", keyStorePath);
		System.setProperty("javax.net.ssl.keyStorePassword", keyStorePassword);
		System.setProperty("javax.net.ssl.trustStore", trustStorePath);
		System.setProperty("javax.net.ssl.trustStorePassword", trustStorePassword);
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(412, 236, 376, 228);
		setLocationRelativeTo(null);
		setTitle("Prijava");
		setResizable(false);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(null);
		setContentPane(contentPane);
		
		initComponents();
		initButtonListener();
	}
	
	private void initComponents() {
		lblUsername = new JLabel("Korisničko ime: ");
		lblUsername.setFont(new Font(lblUsername.getFont().getFontName(), Font.PLAIN, 16));
		lblUsername.setBounds(30, 20, 300, 25);
		contentPane.add(lblUsername);
		
		tfUsername = new JTextField();
		tfUsername.setBounds(30, 45, 300, 30);
		contentPane.add(tfUsername);
		
		lblPassword = new JLabel("Lozinka: ");
		lblPassword.setFont(new Font(lblPassword.getFont().getFontName(), Font.PLAIN, 16));
		lblPassword.setBounds(30, 75, 300, 25);
		contentPane.add(lblPassword);
		
		pfPassword = new JPasswordField();
		pfPassword.setBounds(30, 100, 300, 30);
		contentPane.add(pfPassword);
		
		btnLogin = new JButton("Prijavi me");
		btnLogin.setBackground(Color.WHITE);
		btnLogin.setFont(new Font(btnLogin.getFont().getFontName(), Font.PLAIN, 14));
		btnLogin.setBounds(230, 140, 100, 30);
		btnLogin.setBorder(new LineBorder(Color.BLACK));
		contentPane.add(btnLogin);
	}
	
	private void initButtonListener() {
		btnLogin.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				btnLoginClicked();
			}
		});
	}
	
	private User postJSON(String username, String password) {
		User user = new User("", "", username, password, false);
		URL url;
		try {
			url = new URL(BASE_URL + "/login");
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setDoOutput(true);
			conn.setRequestMethod("POST");
			conn.setRequestProperty("Content-Type", "application/json");
			OutputStream os = conn.getOutputStream();
			Gson gsonBuilder = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").create();
			String json = gsonBuilder.toJson(user);
			os.write(json.getBytes());
			os.flush();
			if(conn.getResponseCode() != HttpURLConnection.HTTP_OK) {
				os.close();
				conn.disconnect();
				return null;
			}
			InputStream is = conn.getInputStream();
			BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
			String jsonText = readAll(rd);
			JSONObject jsonObject = new JSONObject(jsonText);
			User loggedInUser = new Gson().fromJson(jsonObject.toString(), User.class);
			is.close();
			os.close();
			conn.disconnect();
			return loggedInUser;
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (ProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	@SuppressWarnings("unchecked")
	private void btnLoginClicked() {
		String username = tfUsername.getText();
		String password = String.valueOf(pfPassword.getPassword());
		if("".equals(username)) {
			JOptionPane.showMessageDialog(null, "Niste unijeli korisničko ime.");
		} else if("".equals(password)) {
			JOptionPane.showMessageDialog(null, "Niste unijeli lozinku.");
		} else{
			User user = postJSON(username, password);
			if(user == null) {
				JOptionPane.showMessageDialog(null, "Uneseni kredencijali nisu ispravni.");
			} else {
				// TODO poslati zahtjev na login server
				int port = PropertyManager.getInstance().getLoginPort();
				try {
					InetAddress address = InetAddress.getByName(PropertyManager.getInstance().getServerAddress());
					SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
					SSLSocket socket = (SSLSocket) factory.createSocket(address, port);
					ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
					ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
					
					out.writeObject(user);
					out.flush();
					if("LIST".equals(in.readObject())) {
						ArrayList<User> users = (ArrayList<User>) in.readObject();
						MainForm mf = new MainForm(user);
						mf.colorButtons(users);
						setVisible(false);
						mf.setVisible(true);
					}
				} catch (UnknownHostException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			}
		}
	}
	
	private String readAll(Reader rd) throws IOException {
		StringBuilder sb = new StringBuilder();
		int cp;
		while ((cp = rd.read()) != -1) {
			sb.append((char) cp);
		}
		return sb.toString();
	}

}
